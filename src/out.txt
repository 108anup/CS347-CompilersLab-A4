Starting parse
Entering state 0
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 21
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 21 (line 54):
   $1 = token ID ()
-> $$ = nterm primary_expression ()
Stack now 0
Entering state 43
Reducing stack by rule 29 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0
Entering state 44
Next token is token ASSIGN ()
Reducing stack by rule 45 (line 93):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0
Entering state 45
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 107
Reading a token: Next token is token NUM ()
Shifting token NUM ()
Entering state 23
Reducing stack by rule 22 (line 55):
   $1 = token NUM ()
-> $$ = nterm primary_expression ()
Stack now 0 45 107
Entering state 43
Reducing stack by rule 29 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 45 107
Entering state 44
Reading a token: Next token is token STAR ()
Reducing stack by rule 45 (line 93):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 45 107
Entering state 45
Next token is token STAR ()
Reducing stack by rule 55 (line 109):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 45 107
Entering state 47
Next token is token STAR ()
Shifting token STAR ()
Entering state 109
Reading a token: Next token is token NUM ()
Shifting token NUM ()
Entering state 23
Reducing stack by rule 22 (line 55):
   $1 = token NUM ()
-> $$ = nterm primary_expression ()
Stack now 0 45 107 47 109
Entering state 43
Reducing stack by rule 29 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 45 107 47 109
Entering state 44
Reading a token: Next token is token STAR ()
Reducing stack by rule 45 (line 93):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 45 107 47 109
Entering state 181
Reducing stack by rule 56 (line 110):
   $1 = nterm multiplicative_expression ()
   $2 = token STAR ()
   $3 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 45 107
Entering state 47
Next token is token STAR ()
Shifting token STAR ()
Entering state 109
Reading a token: Next token is token NUM ()
Shifting token NUM ()
Entering state 23
Reducing stack by rule 22 (line 55):
   $1 = token NUM ()
-> $$ = nterm primary_expression ()
Stack now 0 45 107 47 109
Entering state 43
Reducing stack by rule 29 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 45 107 47 109
Entering state 44
Reading a token: Next token is token STAR ()
Reducing stack by rule 45 (line 93):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 45 107 47 109
Entering state 181
Reducing stack by rule 56 (line 110):
   $1 = nterm multiplicative_expression ()
   $2 = token STAR ()
   $3 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 45 107
Entering state 47
Next token is token STAR ()
Shifting token STAR ()
Entering state 109
Reading a token: Next token is token NUM ()
Shifting token NUM ()
Entering state 23
Reducing stack by rule 22 (line 55):
   $1 = token NUM ()
-> $$ = nterm primary_expression ()
Stack now 0 45 107 47 109
Entering state 43
Reducing stack by rule 29 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 45 107 47 109
Entering state 44
Reading a token: Next token is token PLUS ()
Reducing stack by rule 45 (line 93):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 45 107 47 109
Entering state 181
Reducing stack by rule 56 (line 110):
   $1 = nterm multiplicative_expression ()
   $2 = token STAR ()
   $3 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 45 107
Entering state 47
Next token is token PLUS ()
Reducing stack by rule 59 (line 116):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 45 107
Entering state 48
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 112
Reading a token: Next token is token NUM ()
Shifting token NUM ()
Entering state 23
Reducing stack by rule 22 (line 55):
   $1 = token NUM ()
-> $$ = nterm primary_expression ()
Stack now 0 45 107 48 112
Entering state 43
Reducing stack by rule 29 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 45 107 48 112
Entering state 44
Reading a token: Next token is token STAR ()
Reducing stack by rule 45 (line 93):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 45 107 48 112
Entering state 184
Reducing stack by rule 55 (line 109):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 45 107 48 112
Entering state 185
Next token is token STAR ()
Shifting token STAR ()
Entering state 109
Reading a token: Next token is token NUM ()
Shifting token NUM ()
Entering state 23
Reducing stack by rule 22 (line 55):
   $1 = token NUM ()
-> $$ = nterm primary_expression ()
Stack now 0 45 107 48 112 185 109
Entering state 43
Reducing stack by rule 29 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 45 107 48 112 185 109
Entering state 44
Reading a token: Next token is token STAR ()
Reducing stack by rule 45 (line 93):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 45 107 48 112 185 109
Entering state 181
Reducing stack by rule 56 (line 110):
   $1 = nterm multiplicative_expression ()
   $2 = token STAR ()
   $3 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 45 107 48 112
Entering state 185
Next token is token STAR ()
Shifting token STAR ()
Entering state 109
Reading a token: Next token is token NUM ()
Shifting token NUM ()
Entering state 23
Reducing stack by rule 22 (line 55):
   $1 = token NUM ()
-> $$ = nterm primary_expression ()
Stack now 0 45 107 48 112 185 109
Entering state 43
Reducing stack by rule 29 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 45 107 48 112 185 109
Entering state 44
Reading a token: Next token is token SEMI ()
Reducing stack by rule 45 (line 93):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 45 107 48 112 185 109
Entering state 181
Reducing stack by rule 56 (line 110):
   $1 = nterm multiplicative_expression ()
   $2 = token STAR ()
   $3 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 45 107 48 112
Entering state 185
Next token is token SEMI ()
Reducing stack by rule 60 (line 117):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 45 107
Entering state 48
Next token is token SEMI ()
Reducing stack by rule 62 (line 122):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 45 107
Entering state 49
Next token is token SEMI ()
Reducing stack by rule 67 (line 130):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 45 107
Entering state 50
Next token is token SEMI ()
Reducing stack by rule 70 (line 136):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 45 107
Entering state 51
Next token is token SEMI ()
Reducing stack by rule 72 (line 141):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 45 107
Entering state 52
Next token is token SEMI ()
Reducing stack by rule 74 (line 146):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 45 107
Entering state 53
Next token is token SEMI ()
Reducing stack by rule 76 (line 151):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 45 107
Entering state 54
Next token is token SEMI ()
Reducing stack by rule 78 (line 156):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 45 107
Entering state 55
Next token is token SEMI ()
Reducing stack by rule 80 (line 161):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 45 107
Entering state 56
Reducing stack by rule 82 (line 166):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 45 107
Entering state 180
Reducing stack by rule 83 (line 167):
   $1 = nterm unary_expression ()
   $2 = token ASSIGN ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0
Entering state 57
Reducing stack by rule 84 (line 171):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0
Entering state 58
Next token is token SEMI ()
Shifting token SEMI ()
Entering state 126
Reducing stack by rule 95 (line 191):
   $1 = nterm expression ()
   $2 = token SEMI ()
-> $$ = nterm expression_statement ()
Stack now 0
Entering state 61
Reducing stack by rule 3 (line 24):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0
Entering state 40
Reading a token: Now at end of input.
Reducing stack by rule 2 (line 20):
-> $$ = nterm statement_list ()
Stack now 0 40
Entering state 98
Reducing stack by rule 1 (line 19):
   $1 = nterm statement ()
   $2 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0
Entering state 39
Now at end of input.
Shifting token $end ()
Entering state 97
Stack now 0 39 97
Cleanup: popping token $end ()
Cleanup: popping nterm statement_list ()
